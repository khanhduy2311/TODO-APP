const { initializeApp } = require("firebase/app");
const { getFirestore, collection, query, where, getDocs } = require("firebase/firestore");
const { getAuth, getUser } = require("firebase/auth");
const { Resend } = require("resend");

// L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ "Secrets" c·ªßa GitHub Actions
const firebaseConfig = {
  apiKey: process.env.VITE_API_KEY,
  authDomain: process.env.VITE_AUTH_DOMAIN,
  projectId: process.env.VITE_PROJECT_ID,
  storageBucket: process.env.VITE_STORAGE_BUCKET,
  messagingSenderId: process.env.VITE_MESSAGING_SENDER_ID,
  appId: process.env.VITE_APP_ID,
};

const resend = new Resend(process.env.RESEND_API_KEY);

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y
async function sendReminders() {
  console.log("Initializing Firebase...");
  const app = initializeApp(firebaseConfig);
  const db = getFirestore(app);
  const auth = getAuth(app);
  console.log("Firebase initialized. Starting deadline check...");

  // L·∫•y ng√†y mai
  const today = new Date();
  const tomorrow = new Date();
  tomorrow.setDate(today.getDate() + 1);
  const year = tomorrow.getFullYear();
  const month = String(tomorrow.getMonth() + 1).padStart(2, "0");
  const day = String(tomorrow.getDate()).padStart(2, "0");
  const tomorrowISO = `${year}-${month}-${day}`;

  // 1. T√¨m c√°c c√¥ng vi·ªác ƒë·∫øn h·∫°n v√†o ng√†y mai
  const q = query(
    collection(db, "todos"),
    where("dueDate", "==", tomorrowISO),
    where("completed", "==", false)
  );
  const snapshot = await getDocs(q);

  if (snapshot.empty) {
    console.log("No tasks due tomorrow. Exiting.");
    return;
  }

  // 2. Gom c√¥ng vi·ªác theo t·ª´ng ng∆∞·ªùi d√πng
  const tasksByUser = {};
  snapshot.forEach((doc) => {
    const task = doc.data();
    if (!tasksByUser[task.uid]) {
      tasksByUser[task.uid] = [];
    }
    tasksByUser[task.uid].push(task);
  });

  console.log(`Found tasks for ${Object.keys(tasksByUser).length} user(s).`);

  // 3. G·ª≠i email cho t·ª´ng ng∆∞·ªùi
  for (const uid in tasksByUser) {
    try {
      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ UID
      const userRecord = await getUser(auth, uid);
      const userEmail = userRecord.email;
      const tasks = tasksByUser[uid];

      console.log(`Sending email to ${userEmail}...`);
      
      // So·∫°n v√† g·ª≠i email b·∫±ng Resend
      await resend.emails.send({
        from: 'Todo App <onboarding@resend.dev>', // Resend y√™u c·∫ßu d√πng domain n√†y cho g√≥i mi·ªÖn ph√≠
        to: userEmail,
        subject: `üîî Nh·∫Øc nh·ªü: B·∫°n c√≥ ${tasks.length} c√¥ng vi·ªác s·∫Øp ƒë·∫øn h·∫°n!`,
        html: `
          <h1>Xin ch√†o ${userRecord.displayName || ''},</h1>
          <p>ƒê√¢y l√† l·ªùi nh·∫Øc cho c√°c c√¥ng vi·ªác s·∫Ω h·∫øt h·∫°n v√†o ng√†y mai:</p>
          <ul>
            ${tasks.map((t) => `<li>${t.text}</li>`).join('')}
          </ul>
          <p>H√£y ho√†n th√†nh ch√∫ng s·ªõm nh√©!</p>
        `,
      });
      console.log(`Email sent successfully to ${userEmail}`);
    } catch (error) {
      console.error(`Failed to send email for UID: ${uid}`, error);
    }
  }
}

// Ch·∫°y h√†m
sendReminders();